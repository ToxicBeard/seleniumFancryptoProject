/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.identity.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.identity.Indexes;
import ru.toxic.fancrypto.identity.Keys;
import ru.toxic.fancrypto.identity.Public;
import ru.toxic.fancrypto.identity.tables.records.AspNetRoleClaimsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AspNetRoleClaims extends TableImpl<AspNetRoleClaimsRecord> {

    private static final long serialVersionUID = -176352011;

    /**
     * The reference instance of <code>public.asp_net_role_claims</code>
     */
    public static final AspNetRoleClaims ASP_NET_ROLE_CLAIMS = new AspNetRoleClaims();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AspNetRoleClaimsRecord> getRecordType() {
        return AspNetRoleClaimsRecord.class;
    }

    /**
     * The column <code>public.asp_net_role_claims.id</code>.
     */
    public final TableField<AspNetRoleClaimsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.asp_net_role_claims.role_id</code>.
     */
    public final TableField<AspNetRoleClaimsRecord, String> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_role_claims.claim_type</code>.
     */
    public final TableField<AspNetRoleClaimsRecord, String> CLAIM_TYPE = createField(DSL.name("claim_type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.asp_net_role_claims.claim_value</code>.
     */
    public final TableField<AspNetRoleClaimsRecord, String> CLAIM_VALUE = createField(DSL.name("claim_value"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.asp_net_role_claims</code> table reference
     */
    public AspNetRoleClaims() {
        this(DSL.name("asp_net_role_claims"), null);
    }

    /**
     * Create an aliased <code>public.asp_net_role_claims</code> table reference
     */
    public AspNetRoleClaims(String alias) {
        this(DSL.name(alias), ASP_NET_ROLE_CLAIMS);
    }

    /**
     * Create an aliased <code>public.asp_net_role_claims</code> table reference
     */
    public AspNetRoleClaims(Name alias) {
        this(alias, ASP_NET_ROLE_CLAIMS);
    }

    private AspNetRoleClaims(Name alias, Table<AspNetRoleClaimsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AspNetRoleClaims(Name alias, Table<AspNetRoleClaimsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AspNetRoleClaims(Table<O> child, ForeignKey<O, AspNetRoleClaimsRecord> key) {
        super(child, key, ASP_NET_ROLE_CLAIMS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_ASP_NET_ROLE_CLAIMS_ROLE_ID);
    }

    @Override
    public Identity<AspNetRoleClaimsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ASP_NET_ROLE_CLAIMS;
    }

    @Override
    public UniqueKey<AspNetRoleClaimsRecord> getPrimaryKey() {
        return Keys.PK_ASP_NET_ROLE_CLAIMS;
    }

    @Override
    public List<UniqueKey<AspNetRoleClaimsRecord>> getKeys() {
        return Arrays.<UniqueKey<AspNetRoleClaimsRecord>>asList(Keys.PK_ASP_NET_ROLE_CLAIMS);
    }

    @Override
    public List<ForeignKey<AspNetRoleClaimsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AspNetRoleClaimsRecord, ?>>asList(Keys.ASP_NET_ROLE_CLAIMS__FK_ASP_NET_ROLE_CLAIMS_ASP_NET_ROLES_ROLE_ID);
    }

    public AspNetRoles aspNetRoles() {
        return new AspNetRoles(this, Keys.ASP_NET_ROLE_CLAIMS__FK_ASP_NET_ROLE_CLAIMS_ASP_NET_ROLES_ROLE_ID);
    }

    @Override
    public AspNetRoleClaims as(String alias) {
        return new AspNetRoleClaims(DSL.name(alias), this);
    }

    @Override
    public AspNetRoleClaims as(Name alias) {
        return new AspNetRoleClaims(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AspNetRoleClaims rename(String name) {
        return new AspNetRoleClaims(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AspNetRoleClaims rename(Name name) {
        return new AspNetRoleClaims(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
