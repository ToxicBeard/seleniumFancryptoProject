/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.identity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.identity.Keys;
import ru.toxic.fancrypto.identity.Public;
import ru.toxic.fancrypto.identity.tables.records.SignInsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SignIns extends TableImpl<SignInsRecord> {

    private static final long serialVersionUID = 393723208;

    /**
     * The reference instance of <code>public.sign_ins</code>
     */
    public static final SignIns SIGN_INS = new SignIns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SignInsRecord> getRecordType() {
        return SignInsRecord.class;
    }

    /**
     * The column <code>public.sign_ins.id</code>.
     */
    public final TableField<SignInsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sign_ins.username</code>.
     */
    public final TableField<SignInsRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.sign_ins.client_name</code>.
     */
    public final TableField<SignInsRecord, String> CLIENT_NAME = createField(DSL.name("client_name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.sign_ins.created_at</code>.
     */
    public final TableField<SignInsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.sign_ins.ip</code>.
     */
    public final TableField<SignInsRecord, String> IP = createField(DSL.name("ip"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.sign_ins.result</code>.
     */
    public final TableField<SignInsRecord, String> RESULT = createField(DSL.name("result"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.sign_ins</code> table reference
     */
    public SignIns() {
        this(DSL.name("sign_ins"), null);
    }

    /**
     * Create an aliased <code>public.sign_ins</code> table reference
     */
    public SignIns(String alias) {
        this(DSL.name(alias), SIGN_INS);
    }

    /**
     * Create an aliased <code>public.sign_ins</code> table reference
     */
    public SignIns(Name alias) {
        this(alias, SIGN_INS);
    }

    private SignIns(Name alias, Table<SignInsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SignIns(Name alias, Table<SignInsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SignIns(Table<O> child, ForeignKey<O, SignInsRecord> key) {
        super(child, key, SIGN_INS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<SignInsRecord, Long> getIdentity() {
        return Keys.IDENTITY_SIGN_INS;
    }

    @Override
    public UniqueKey<SignInsRecord> getPrimaryKey() {
        return Keys.PK_SIGN_INS;
    }

    @Override
    public List<UniqueKey<SignInsRecord>> getKeys() {
        return Arrays.<UniqueKey<SignInsRecord>>asList(Keys.PK_SIGN_INS);
    }

    @Override
    public SignIns as(String alias) {
        return new SignIns(DSL.name(alias), this);
    }

    @Override
    public SignIns as(Name alias) {
        return new SignIns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SignIns rename(String name) {
        return new SignIns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SignIns rename(Name name) {
        return new SignIns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, LocalDateTime, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
