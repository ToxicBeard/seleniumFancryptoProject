/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.identity.tables;


import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.identity.Indexes;
import ru.toxic.fancrypto.identity.Keys;
import ru.toxic.fancrypto.identity.Public;
import ru.toxic.fancrypto.identity.tables.records.AspNetUsersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AspNetUsers extends TableImpl<AspNetUsersRecord> {

    private static final long serialVersionUID = 1966448703;

    /**
     * The reference instance of <code>public.asp_net_users</code>
     */
    public static final AspNetUsers ASP_NET_USERS = new AspNetUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AspNetUsersRecord> getRecordType() {
        return AspNetUsersRecord.class;
    }

    /**
     * The column <code>public.asp_net_users.id</code>.
     */
    public final TableField<AspNetUsersRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.user_name</code>.
     */
    public final TableField<AspNetUsersRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.asp_net_users.normalized_user_name</code>.
     */
    public final TableField<AspNetUsersRecord, String> NORMALIZED_USER_NAME = createField(DSL.name("normalized_user_name"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.asp_net_users.email</code>.
     */
    public final TableField<AspNetUsersRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.asp_net_users.normalized_email</code>.
     */
    public final TableField<AspNetUsersRecord, String> NORMALIZED_EMAIL = createField(DSL.name("normalized_email"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.asp_net_users.email_confirmed</code>.
     */
    public final TableField<AspNetUsersRecord, Boolean> EMAIL_CONFIRMED = createField(DSL.name("email_confirmed"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.password_hash</code>.
     */
    public final TableField<AspNetUsersRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.asp_net_users.security_stamp</code>.
     */
    public final TableField<AspNetUsersRecord, String> SECURITY_STAMP = createField(DSL.name("security_stamp"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.asp_net_users.concurrency_stamp</code>.
     */
    public final TableField<AspNetUsersRecord, String> CONCURRENCY_STAMP = createField(DSL.name("concurrency_stamp"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.asp_net_users.phone_number</code>.
     */
    public final TableField<AspNetUsersRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.asp_net_users.phone_number_confirmed</code>.
     */
    public final TableField<AspNetUsersRecord, Boolean> PHONE_NUMBER_CONFIRMED = createField(DSL.name("phone_number_confirmed"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.two_factor_enabled</code>.
     */
    public final TableField<AspNetUsersRecord, Boolean> TWO_FACTOR_ENABLED = createField(DSL.name("two_factor_enabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.lockout_end</code>.
     */
    public final TableField<AspNetUsersRecord, OffsetDateTime> LOCKOUT_END = createField(DSL.name("lockout_end"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.asp_net_users.lockout_enabled</code>.
     */
    public final TableField<AspNetUsersRecord, Boolean> LOCKOUT_ENABLED = createField(DSL.name("lockout_enabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.access_failed_count</code>.
     */
    public final TableField<AspNetUsersRecord, Integer> ACCESS_FAILED_COUNT = createField(DSL.name("access_failed_count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.two_fa_secret</code>.
     */
    public final TableField<AspNetUsersRecord, String> TWO_FA_SECRET = createField(DSL.name("two_fa_secret"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.asp_net_users.last_sms_sent</code>.
     */
    public final TableField<AspNetUsersRecord, LocalDateTime> LAST_SMS_SENT = createField(DSL.name("last_sms_sent"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.last_online</code>.
     */
    public final TableField<AspNetUsersRecord, LocalDateTime> LAST_ONLINE = createField(DSL.name("last_online"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.reference_token</code>.
     */
    public final TableField<AspNetUsersRecord, String> REFERENCE_TOKEN = createField(DSL.name("reference_token"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.asp_net_users.reference_token_created_at</code>.
     */
    public final TableField<AspNetUsersRecord, LocalDateTime> REFERENCE_TOKEN_CREATED_AT = createField(DSL.name("reference_token_created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.asp_net_users.created_at</code>.
     */
    public final TableField<AspNetUsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.is_anonymous</code>.
     */
    public final TableField<AspNetUsersRecord, Boolean> IS_ANONYMOUS = createField(DSL.name("is_anonymous"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_users.telegram_id</code>.
     */
    public final TableField<AspNetUsersRecord, Integer> TELEGRAM_ID = createField(DSL.name("telegram_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.asp_net_users</code> table reference
     */
    public AspNetUsers() {
        this(DSL.name("asp_net_users"), null);
    }

    /**
     * Create an aliased <code>public.asp_net_users</code> table reference
     */
    public AspNetUsers(String alias) {
        this(DSL.name(alias), ASP_NET_USERS);
    }

    /**
     * Create an aliased <code>public.asp_net_users</code> table reference
     */
    public AspNetUsers(Name alias) {
        this(alias, ASP_NET_USERS);
    }

    private AspNetUsers(Name alias, Table<AspNetUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AspNetUsers(Name alias, Table<AspNetUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AspNetUsers(Table<O> child, ForeignKey<O, AspNetUsersRecord> key) {
        super(child, key, ASP_NET_USERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMAIL_INDEX, Indexes.IX_ASP_NET_USERS_TELEGRAM_ID, Indexes.USER_NAME_INDEX);
    }

    @Override
    public UniqueKey<AspNetUsersRecord> getPrimaryKey() {
        return Keys.PK_ASP_NET_USERS;
    }

    @Override
    public List<UniqueKey<AspNetUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<AspNetUsersRecord>>asList(Keys.PK_ASP_NET_USERS);
    }

    @Override
    public AspNetUsers as(String alias) {
        return new AspNetUsers(DSL.name(alias), this);
    }

    @Override
    public AspNetUsers as(Name alias) {
        return new AspNetUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AspNetUsers rename(String name) {
        return new AspNetUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AspNetUsers rename(Name name) {
        return new AspNetUsers(name, null);
    }
}
