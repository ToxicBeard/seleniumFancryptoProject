/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.identity.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.identity.Indexes;
import ru.toxic.fancrypto.identity.Keys;
import ru.toxic.fancrypto.identity.Public;
import ru.toxic.fancrypto.identity.tables.records.AspNetUserClaimsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AspNetUserClaims extends TableImpl<AspNetUserClaimsRecord> {

    private static final long serialVersionUID = -2013154505;

    /**
     * The reference instance of <code>public.asp_net_user_claims</code>
     */
    public static final AspNetUserClaims ASP_NET_USER_CLAIMS = new AspNetUserClaims();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AspNetUserClaimsRecord> getRecordType() {
        return AspNetUserClaimsRecord.class;
    }

    /**
     * The column <code>public.asp_net_user_claims.id</code>.
     */
    public final TableField<AspNetUserClaimsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.asp_net_user_claims.user_id</code>.
     */
    public final TableField<AspNetUserClaimsRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_user_claims.claim_type</code>.
     */
    public final TableField<AspNetUserClaimsRecord, String> CLAIM_TYPE = createField(DSL.name("claim_type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.asp_net_user_claims.claim_value</code>.
     */
    public final TableField<AspNetUserClaimsRecord, String> CLAIM_VALUE = createField(DSL.name("claim_value"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.asp_net_user_claims</code> table reference
     */
    public AspNetUserClaims() {
        this(DSL.name("asp_net_user_claims"), null);
    }

    /**
     * Create an aliased <code>public.asp_net_user_claims</code> table reference
     */
    public AspNetUserClaims(String alias) {
        this(DSL.name(alias), ASP_NET_USER_CLAIMS);
    }

    /**
     * Create an aliased <code>public.asp_net_user_claims</code> table reference
     */
    public AspNetUserClaims(Name alias) {
        this(alias, ASP_NET_USER_CLAIMS);
    }

    private AspNetUserClaims(Name alias, Table<AspNetUserClaimsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AspNetUserClaims(Name alias, Table<AspNetUserClaimsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AspNetUserClaims(Table<O> child, ForeignKey<O, AspNetUserClaimsRecord> key) {
        super(child, key, ASP_NET_USER_CLAIMS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_ASP_NET_USER_CLAIMS_USER_ID);
    }

    @Override
    public Identity<AspNetUserClaimsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ASP_NET_USER_CLAIMS;
    }

    @Override
    public UniqueKey<AspNetUserClaimsRecord> getPrimaryKey() {
        return Keys.PK_ASP_NET_USER_CLAIMS;
    }

    @Override
    public List<UniqueKey<AspNetUserClaimsRecord>> getKeys() {
        return Arrays.<UniqueKey<AspNetUserClaimsRecord>>asList(Keys.PK_ASP_NET_USER_CLAIMS);
    }

    @Override
    public List<ForeignKey<AspNetUserClaimsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AspNetUserClaimsRecord, ?>>asList(Keys.ASP_NET_USER_CLAIMS__FK_ASP_NET_USER_CLAIMS_ASP_NET_USERS_USER_ID);
    }

    public AspNetUsers aspNetUsers() {
        return new AspNetUsers(this, Keys.ASP_NET_USER_CLAIMS__FK_ASP_NET_USER_CLAIMS_ASP_NET_USERS_USER_ID);
    }

    @Override
    public AspNetUserClaims as(String alias) {
        return new AspNetUserClaims(DSL.name(alias), this);
    }

    @Override
    public AspNetUserClaims as(Name alias) {
        return new AspNetUserClaims(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AspNetUserClaims rename(String name) {
        return new AspNetUserClaims(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AspNetUserClaims rename(Name name) {
        return new AspNetUserClaims(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
