/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.data.Indexes;
import ru.toxic.fancrypto.data.Keys;
import ru.toxic.fancrypto.data.Public;
import ru.toxic.fancrypto.data.tables.records.FeedbacksRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Feedbacks extends TableImpl<FeedbacksRecord> {

    private static final long serialVersionUID = 554526625;

    /**
     * The reference instance of <code>public.feedbacks</code>
     */
    public static final Feedbacks FEEDBACKS = new Feedbacks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedbacksRecord> getRecordType() {
        return FeedbacksRecord.class;
    }

    /**
     * The column <code>public.feedbacks.id</code>.
     */
    public final TableField<FeedbacksRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.feedbacks.from_id</code>.
     */
    public final TableField<FeedbacksRecord, Long> FROM_ID = createField(DSL.name("from_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.feedbacks.to_id</code>.
     */
    public final TableField<FeedbacksRecord, Long> TO_ID = createField(DSL.name("to_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.feedbacks.created_at</code>.
     */
    public final TableField<FeedbacksRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.feedbacks.is_positive</code>.
     */
    public final TableField<FeedbacksRecord, Boolean> IS_POSITIVE = createField(DSL.name("is_positive"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.feedbacks.text</code>.
     */
    public final TableField<FeedbacksRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.feedbacks</code> table reference
     */
    public Feedbacks() {
        this(DSL.name("feedbacks"), null);
    }

    /**
     * Create an aliased <code>public.feedbacks</code> table reference
     */
    public Feedbacks(String alias) {
        this(DSL.name(alias), FEEDBACKS);
    }

    /**
     * Create an aliased <code>public.feedbacks</code> table reference
     */
    public Feedbacks(Name alias) {
        this(alias, FEEDBACKS);
    }

    private Feedbacks(Name alias, Table<FeedbacksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feedbacks(Name alias, Table<FeedbacksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Feedbacks(Table<O> child, ForeignKey<O, FeedbacksRecord> key) {
        super(child, key, FEEDBACKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_FEEDBACKS_FROM_ID, Indexes.IX_FEEDBACKS_TO_ID);
    }

    @Override
    public Identity<FeedbacksRecord, Long> getIdentity() {
        return Keys.IDENTITY_FEEDBACKS;
    }

    @Override
    public UniqueKey<FeedbacksRecord> getPrimaryKey() {
        return Keys.PK_FEEDBACKS;
    }

    @Override
    public List<UniqueKey<FeedbacksRecord>> getKeys() {
        return Arrays.<UniqueKey<FeedbacksRecord>>asList(Keys.PK_FEEDBACKS);
    }

    @Override
    public List<ForeignKey<FeedbacksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FeedbacksRecord, ?>>asList(Keys.FEEDBACKS__FK_FEEDBACKS_USER_DATAS_FROM_ID, Keys.FEEDBACKS__FK_FEEDBACKS_USER_DATAS_TO_ID);
    }

    public UserDatas fkFeedbacksUserDatasFromId() {
        return new UserDatas(this, Keys.FEEDBACKS__FK_FEEDBACKS_USER_DATAS_FROM_ID);
    }

    public UserDatas fkFeedbacksUserDatasToId() {
        return new UserDatas(this, Keys.FEEDBACKS__FK_FEEDBACKS_USER_DATAS_TO_ID);
    }

    @Override
    public Feedbacks as(String alias) {
        return new Feedbacks(DSL.name(alias), this);
    }

    @Override
    public Feedbacks as(Name alias) {
        return new Feedbacks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feedbacks rename(String name) {
        return new Feedbacks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feedbacks rename(Name name) {
        return new Feedbacks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, LocalDateTime, Boolean, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
