/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.data.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.data.Indexes;
import ru.toxic.fancrypto.data.Keys;
import ru.toxic.fancrypto.data.Public;
import ru.toxic.fancrypto.data.tables.records.AdvertisementSnapshotRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdvertisementSnapshot extends TableImpl<AdvertisementSnapshotRecord> {

    private static final long serialVersionUID = 359967641;

    /**
     * The reference instance of <code>public.advertisement_snapshot</code>
     */
    public static final AdvertisementSnapshot ADVERTISEMENT_SNAPSHOT = new AdvertisementSnapshot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdvertisementSnapshotRecord> getRecordType() {
        return AdvertisementSnapshotRecord.class;
    }

    /**
     * The column <code>public.advertisement_snapshot.key</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Long> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.advertisement_snapshot.id</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.equation</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, String> EQUATION = createField(DSL.name("equation"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.advertisement_snapshot.min_amount</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, BigDecimal> MIN_AMOUNT = createField(DSL.name("min_amount"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.max_amount</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, BigDecimal> MAX_AMOUNT = createField(DSL.name("max_amount"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.message</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.advertisement_snapshot.created_at</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.country</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Integer> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.payment_type</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Integer> PAYMENT_TYPE = createField(DSL.name("payment_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.fiat_currency</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Integer> FIAT_CURRENCY = createField(DSL.name("fiat_currency"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.crypto_currency</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Integer> CRYPTO_CURRENCY = createField(DSL.name("crypto_currency"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.is_buy</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Boolean> IS_BUY = createField(DSL.name("is_buy"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.owner_key</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Long> OWNER_KEY = createField(DSL.name("owner_key"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.advertisement_snapshot.monitor_liquidity</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Boolean> MONITOR_LIQUIDITY = createField(DSL.name("monitor_liquidity"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.not_anonymous</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Boolean> NOT_ANONYMOUS = createField(DSL.name("not_anonymous"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.phone_confirmed</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Boolean> PHONE_CONFIRMED = createField(DSL.name("phone_confirmed"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.trusted</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Boolean> TRUSTED = createField(DSL.name("trusted"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.title</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.advertisement_snapshot.window</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Long> WINDOW = createField(DSL.name("window"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.is_enabled</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Boolean> IS_ENABLED = createField(DSL.name("is_enabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.advertisement_snapshot.metadata_key</code>.
     */
    public final TableField<AdvertisementSnapshotRecord, Long> METADATA_KEY = createField(DSL.name("metadata_key"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.advertisement_snapshot</code> table reference
     */
    public AdvertisementSnapshot() {
        this(DSL.name("advertisement_snapshot"), null);
    }

    /**
     * Create an aliased <code>public.advertisement_snapshot</code> table reference
     */
    public AdvertisementSnapshot(String alias) {
        this(DSL.name(alias), ADVERTISEMENT_SNAPSHOT);
    }

    /**
     * Create an aliased <code>public.advertisement_snapshot</code> table reference
     */
    public AdvertisementSnapshot(Name alias) {
        this(alias, ADVERTISEMENT_SNAPSHOT);
    }

    private AdvertisementSnapshot(Name alias, Table<AdvertisementSnapshotRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdvertisementSnapshot(Name alias, Table<AdvertisementSnapshotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AdvertisementSnapshot(Table<O> child, ForeignKey<O, AdvertisementSnapshotRecord> key) {
        super(child, key, ADVERTISEMENT_SNAPSHOT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_ADVERTISEMENT_SNAPSHOT_METADATA_KEY, Indexes.IX_ADVERTISEMENT_SNAPSHOT_OWNER_KEY);
    }

    @Override
    public Identity<AdvertisementSnapshotRecord, Long> getIdentity() {
        return Keys.IDENTITY_ADVERTISEMENT_SNAPSHOT;
    }

    @Override
    public UniqueKey<AdvertisementSnapshotRecord> getPrimaryKey() {
        return Keys.PK_ADVERTISEMENT_SNAPSHOT;
    }

    @Override
    public List<UniqueKey<AdvertisementSnapshotRecord>> getKeys() {
        return Arrays.<UniqueKey<AdvertisementSnapshotRecord>>asList(Keys.PK_ADVERTISEMENT_SNAPSHOT);
    }

    @Override
    public List<ForeignKey<AdvertisementSnapshotRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AdvertisementSnapshotRecord, ?>>asList(Keys.ADVERTISEMENT_SNAPSHOT__FK_ADVERTISEMENT_SNAPSHOT_USER_DATA_SNAPSHOT_OWNER_KEY, Keys.ADVERTISEMENT_SNAPSHOT__FK_ADVERTISEMENT_SNAPSHOT_AD_METADATA_SNAPSHOT_METADATA_KEY);
    }

    public UserDataSnapshot userDataSnapshot() {
        return new UserDataSnapshot(this, Keys.ADVERTISEMENT_SNAPSHOT__FK_ADVERTISEMENT_SNAPSHOT_USER_DATA_SNAPSHOT_OWNER_KEY);
    }

    public AdMetadataSnapshot adMetadataSnapshot() {
        return new AdMetadataSnapshot(this, Keys.ADVERTISEMENT_SNAPSHOT__FK_ADVERTISEMENT_SNAPSHOT_AD_METADATA_SNAPSHOT_METADATA_KEY);
    }

    @Override
    public AdvertisementSnapshot as(String alias) {
        return new AdvertisementSnapshot(DSL.name(alias), this);
    }

    @Override
    public AdvertisementSnapshot as(Name alias) {
        return new AdvertisementSnapshot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdvertisementSnapshot rename(String name) {
        return new AdvertisementSnapshot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdvertisementSnapshot rename(Name name) {
        return new AdvertisementSnapshot(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<Long, Long, String, BigDecimal, BigDecimal, String, LocalDateTime, Integer, Integer, Integer, Integer, Boolean, Long, Boolean, Boolean, Boolean, Boolean, String, Long, Boolean, Long> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
