/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.data.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.data.Indexes;
import ru.toxic.fancrypto.data.Keys;
import ru.toxic.fancrypto.data.Public;
import ru.toxic.fancrypto.data.tables.records.JiraCredsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JiraCreds extends TableImpl<JiraCredsRecord> {

    private static final long serialVersionUID = -1966166112;

    /**
     * The reference instance of <code>public.jira_creds</code>
     */
    public static final JiraCreds JIRA_CREDS = new JiraCreds();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JiraCredsRecord> getRecordType() {
        return JiraCredsRecord.class;
    }

    /**
     * The column <code>public.jira_creds.id</code>.
     */
    public final TableField<JiraCredsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.jira_creds.username</code>.
     */
    public final TableField<JiraCredsRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.jira_creds.key</code>.
     */
    public final TableField<JiraCredsRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.jira_creds.password</code>.
     */
    public final TableField<JiraCredsRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.jira_creds</code> table reference
     */
    public JiraCreds() {
        this(DSL.name("jira_creds"), null);
    }

    /**
     * Create an aliased <code>public.jira_creds</code> table reference
     */
    public JiraCreds(String alias) {
        this(DSL.name(alias), JIRA_CREDS);
    }

    /**
     * Create an aliased <code>public.jira_creds</code> table reference
     */
    public JiraCreds(Name alias) {
        this(alias, JIRA_CREDS);
    }

    private JiraCreds(Name alias, Table<JiraCredsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JiraCreds(Name alias, Table<JiraCredsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JiraCreds(Table<O> child, ForeignKey<O, JiraCredsRecord> key) {
        super(child, key, JIRA_CREDS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_JIRA_CREDS_KEY);
    }

    @Override
    public Identity<JiraCredsRecord, Long> getIdentity() {
        return Keys.IDENTITY_JIRA_CREDS;
    }

    @Override
    public UniqueKey<JiraCredsRecord> getPrimaryKey() {
        return Keys.PK_JIRA_CREDS;
    }

    @Override
    public List<UniqueKey<JiraCredsRecord>> getKeys() {
        return Arrays.<UniqueKey<JiraCredsRecord>>asList(Keys.PK_JIRA_CREDS);
    }

    @Override
    public JiraCreds as(String alias) {
        return new JiraCreds(DSL.name(alias), this);
    }

    @Override
    public JiraCreds as(Name alias) {
        return new JiraCreds(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JiraCreds rename(String name) {
        return new JiraCreds(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JiraCreds rename(Name name) {
        return new JiraCreds(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
