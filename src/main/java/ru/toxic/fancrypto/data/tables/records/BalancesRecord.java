/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.data.tables.records;


import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import ru.toxic.fancrypto.data.tables.Balances;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BalancesRecord extends UpdatableRecordImpl<BalancesRecord> implements Record6<Long, Long, Integer, BigDecimal, BigDecimal, BigDecimal> {

    private static final long serialVersionUID = -1027990663;

    /**
     * Setter for <code>public.balances.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.balances.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.balances.owner_id</code>.
     */
    public void setOwnerId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.balances.owner_id</code>.
     */
    public Long getOwnerId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.balances.currency</code>.
     */
    public void setCurrency(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.balances.currency</code>.
     */
    public Integer getCurrency() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.balances.balance</code>.
     */
    public void setBalance(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.balances.balance</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>public.balances.unconfirmed_balance</code>.
     */
    public void setUnconfirmedBalance(BigDecimal value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.balances.unconfirmed_balance</code>.
     */
    public BigDecimal getUnconfirmedBalance() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.balances.deposited</code>.
     */
    public void setDeposited(BigDecimal value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.balances.deposited</code>.
     */
    public BigDecimal getDeposited() {
        return (BigDecimal) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Integer, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Long, Integer, BigDecimal, BigDecimal, BigDecimal> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Balances.BALANCES.ID;
    }

    @Override
    public Field<Long> field2() {
        return Balances.BALANCES.OWNER_ID;
    }

    @Override
    public Field<Integer> field3() {
        return Balances.BALANCES.CURRENCY;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Balances.BALANCES.BALANCE;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Balances.BALANCES.UNCONFIRMED_BALANCE;
    }

    @Override
    public Field<BigDecimal> field6() {
        return Balances.BALANCES.DEPOSITED;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getOwnerId();
    }

    @Override
    public Integer component3() {
        return getCurrency();
    }

    @Override
    public BigDecimal component4() {
        return getBalance();
    }

    @Override
    public BigDecimal component5() {
        return getUnconfirmedBalance();
    }

    @Override
    public BigDecimal component6() {
        return getDeposited();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getOwnerId();
    }

    @Override
    public Integer value3() {
        return getCurrency();
    }

    @Override
    public BigDecimal value4() {
        return getBalance();
    }

    @Override
    public BigDecimal value5() {
        return getUnconfirmedBalance();
    }

    @Override
    public BigDecimal value6() {
        return getDeposited();
    }

    @Override
    public BalancesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BalancesRecord value2(Long value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public BalancesRecord value3(Integer value) {
        setCurrency(value);
        return this;
    }

    @Override
    public BalancesRecord value4(BigDecimal value) {
        setBalance(value);
        return this;
    }

    @Override
    public BalancesRecord value5(BigDecimal value) {
        setUnconfirmedBalance(value);
        return this;
    }

    @Override
    public BalancesRecord value6(BigDecimal value) {
        setDeposited(value);
        return this;
    }

    @Override
    public BalancesRecord values(Long value1, Long value2, Integer value3, BigDecimal value4, BigDecimal value5, BigDecimal value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BalancesRecord
     */
    public BalancesRecord() {
        super(Balances.BALANCES);
    }

    /**
     * Create a detached, initialised BalancesRecord
     */
    public BalancesRecord(Long id, Long ownerId, Integer currency, BigDecimal balance, BigDecimal unconfirmedBalance, BigDecimal deposited) {
        super(Balances.BALANCES);

        set(0, id);
        set(1, ownerId);
        set(2, currency);
        set(3, balance);
        set(4, unconfirmedBalance);
        set(5, deposited);
    }
}
