/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.data.Indexes;
import ru.toxic.fancrypto.data.Keys;
import ru.toxic.fancrypto.data.Public;
import ru.toxic.fancrypto.data.tables.records.DealMessageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DealMessage extends TableImpl<DealMessageRecord> {

    private static final long serialVersionUID = -2002506581;

    /**
     * The reference instance of <code>public.deal_message</code>
     */
    public static final DealMessage DEAL_MESSAGE = new DealMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DealMessageRecord> getRecordType() {
        return DealMessageRecord.class;
    }

    /**
     * The column <code>public.deal_message.id</code>.
     */
    public final TableField<DealMessageRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.deal_message.created_at</code>.
     */
    public final TableField<DealMessageRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.deal_message.owner_id</code>.
     */
    public final TableField<DealMessageRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.deal_message.text</code>.
     */
    public final TableField<DealMessageRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.deal_message.deal_id</code>.
     */
    public final TableField<DealMessageRecord, Long> DEAL_ID = createField(DSL.name("deal_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.deal_message</code> table reference
     */
    public DealMessage() {
        this(DSL.name("deal_message"), null);
    }

    /**
     * Create an aliased <code>public.deal_message</code> table reference
     */
    public DealMessage(String alias) {
        this(DSL.name(alias), DEAL_MESSAGE);
    }

    /**
     * Create an aliased <code>public.deal_message</code> table reference
     */
    public DealMessage(Name alias) {
        this(alias, DEAL_MESSAGE);
    }

    private DealMessage(Name alias, Table<DealMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private DealMessage(Name alias, Table<DealMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DealMessage(Table<O> child, ForeignKey<O, DealMessageRecord> key) {
        super(child, key, DEAL_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_DEAL_MESSAGE_DEAL_ID, Indexes.IX_DEAL_MESSAGE_OWNER_ID);
    }

    @Override
    public Identity<DealMessageRecord, Long> getIdentity() {
        return Keys.IDENTITY_DEAL_MESSAGE;
    }

    @Override
    public UniqueKey<DealMessageRecord> getPrimaryKey() {
        return Keys.PK_DEAL_MESSAGE;
    }

    @Override
    public List<UniqueKey<DealMessageRecord>> getKeys() {
        return Arrays.<UniqueKey<DealMessageRecord>>asList(Keys.PK_DEAL_MESSAGE);
    }

    @Override
    public List<ForeignKey<DealMessageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DealMessageRecord, ?>>asList(Keys.DEAL_MESSAGE__FK_DEAL_MESSAGE_USER_DATAS_OWNER_ID, Keys.DEAL_MESSAGE__FK_DEAL_MESSAGE_DEALS_DEAL_ID);
    }

    public UserDatas userDatas() {
        return new UserDatas(this, Keys.DEAL_MESSAGE__FK_DEAL_MESSAGE_USER_DATAS_OWNER_ID);
    }

    public Deals deals() {
        return new Deals(this, Keys.DEAL_MESSAGE__FK_DEAL_MESSAGE_DEALS_DEAL_ID);
    }

    @Override
    public DealMessage as(String alias) {
        return new DealMessage(DSL.name(alias), this);
    }

    @Override
    public DealMessage as(Name alias) {
        return new DealMessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DealMessage rename(String name) {
        return new DealMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DealMessage rename(Name name) {
        return new DealMessage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, Long, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
