/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.data.Indexes;
import ru.toxic.fancrypto.data.Keys;
import ru.toxic.fancrypto.data.Public;
import ru.toxic.fancrypto.data.tables.records.UserEventsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEvents extends TableImpl<UserEventsRecord> {

    private static final long serialVersionUID = -1871630475;

    /**
     * The reference instance of <code>public.user_events</code>
     */
    public static final UserEvents USER_EVENTS = new UserEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserEventsRecord> getRecordType() {
        return UserEventsRecord.class;
    }

    /**
     * The column <code>public.user_events.id</code>.
     */
    public final TableField<UserEventsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_events.creater_id</code>.
     */
    public final TableField<UserEventsRecord, Long> CREATER_ID = createField(DSL.name("creater_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.user_events.receiver_id</code>.
     */
    public final TableField<UserEventsRecord, Long> RECEIVER_ID = createField(DSL.name("receiver_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.user_events.created_at</code>.
     */
    public final TableField<UserEventsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.user_events.type</code>.
     */
    public final TableField<UserEventsRecord, Integer> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_events.deal_id</code>.
     */
    public final TableField<UserEventsRecord, Long> DEAL_ID = createField(DSL.name("deal_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.user_events.deal_message_id</code>.
     */
    public final TableField<UserEventsRecord, Long> DEAL_MESSAGE_ID = createField(DSL.name("deal_message_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.user_events.source</code>.
     */
    public final TableField<UserEventsRecord, Integer> SOURCE = createField(DSL.name("source"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.user_events.invoice_id</code>.
     */
    public final TableField<UserEventsRecord, Long> INVOICE_ID = createField(DSL.name("invoice_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.user_events.invoice_payment_id</code>.
     */
    public final TableField<UserEventsRecord, Long> INVOICE_PAYMENT_ID = createField(DSL.name("invoice_payment_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.user_events</code> table reference
     */
    public UserEvents() {
        this(DSL.name("user_events"), null);
    }

    /**
     * Create an aliased <code>public.user_events</code> table reference
     */
    public UserEvents(String alias) {
        this(DSL.name(alias), USER_EVENTS);
    }

    /**
     * Create an aliased <code>public.user_events</code> table reference
     */
    public UserEvents(Name alias) {
        this(alias, USER_EVENTS);
    }

    private UserEvents(Name alias, Table<UserEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserEvents(Name alias, Table<UserEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserEvents(Table<O> child, ForeignKey<O, UserEventsRecord> key) {
        super(child, key, USER_EVENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_USER_EVENTS_CREATER_ID, Indexes.IX_USER_EVENTS_DEAL_ID, Indexes.IX_USER_EVENTS_DEAL_MESSAGE_ID, Indexes.IX_USER_EVENTS_INVOICE_ID, Indexes.IX_USER_EVENTS_INVOICE_PAYMENT_ID, Indexes.IX_USER_EVENTS_RECEIVER_ID);
    }

    @Override
    public Identity<UserEventsRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_EVENTS;
    }

    @Override
    public UniqueKey<UserEventsRecord> getPrimaryKey() {
        return Keys.PK_USER_EVENTS;
    }

    @Override
    public List<UniqueKey<UserEventsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserEventsRecord>>asList(Keys.PK_USER_EVENTS);
    }

    @Override
    public List<ForeignKey<UserEventsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserEventsRecord, ?>>asList(Keys.USER_EVENTS__FK_USER_EVENTS_USER_DATAS_CREATER_ID, Keys.USER_EVENTS__FK_USER_EVENTS_USER_DATAS_RECEIVER_ID, Keys.USER_EVENTS__FK_USER_EVENTS_DEALS_DEAL_ID, Keys.USER_EVENTS__FK_USER_EVENTS_DEAL_MESSAGE_DEAL_MESSAGE_ID, Keys.USER_EVENTS__FK_USER_EVENTS_INVOICES_INVOICE_ID, Keys.USER_EVENTS__FK_USER_EVENTS_INVOICE_PAYMENTS_INVOICE_PAYMENT_ID);
    }

    public UserDatas fkUserEventsUserDatasCreaterId() {
        return new UserDatas(this, Keys.USER_EVENTS__FK_USER_EVENTS_USER_DATAS_CREATER_ID);
    }

    public UserDatas fkUserEventsUserDatasReceiverId() {
        return new UserDatas(this, Keys.USER_EVENTS__FK_USER_EVENTS_USER_DATAS_RECEIVER_ID);
    }

    public Deals deals() {
        return new Deals(this, Keys.USER_EVENTS__FK_USER_EVENTS_DEALS_DEAL_ID);
    }

    public DealMessage dealMessage() {
        return new DealMessage(this, Keys.USER_EVENTS__FK_USER_EVENTS_DEAL_MESSAGE_DEAL_MESSAGE_ID);
    }

    public Invoices invoices() {
        return new Invoices(this, Keys.USER_EVENTS__FK_USER_EVENTS_INVOICES_INVOICE_ID);
    }

    public InvoicePayments invoicePayments() {
        return new InvoicePayments(this, Keys.USER_EVENTS__FK_USER_EVENTS_INVOICE_PAYMENTS_INVOICE_PAYMENT_ID);
    }

    @Override
    public UserEvents as(String alias) {
        return new UserEvents(DSL.name(alias), this);
    }

    @Override
    public UserEvents as(Name alias) {
        return new UserEvents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEvents rename(String name) {
        return new UserEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEvents rename(Name name) {
        return new UserEvents(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, LocalDateTime, Integer, Long, Long, Integer, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
