/*
 * This file is generated by jOOQ.
 */
package ru.toxic.fancrypto.data.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.fancrypto.data.Indexes;
import ru.toxic.fancrypto.data.Keys;
import ru.toxic.fancrypto.data.Public;
import ru.toxic.fancrypto.data.tables.records.InvoicesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invoices extends TableImpl<InvoicesRecord> {

    private static final long serialVersionUID = 926500403;

    /**
     * The reference instance of <code>public.invoices</code>
     */
    public static final Invoices INVOICES = new Invoices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoicesRecord> getRecordType() {
        return InvoicesRecord.class;
    }

    /**
     * The column <code>public.invoices.id</code>.
     */
    public final TableField<InvoicesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.invoices.is_private</code>.
     */
    public final TableField<InvoicesRecord, Boolean> IS_PRIVATE = createField(DSL.name("is_private"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.invoices.is_base_crypto</code>.
     */
    public final TableField<InvoicesRecord, Boolean> IS_BASE_CRYPTO = createField(DSL.name("is_base_crypto"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.invoices.user_name</code>.
     */
    public final TableField<InvoicesRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.invoices.fiat_currency</code>.
     */
    public final TableField<InvoicesRecord, Integer> FIAT_CURRENCY = createField(DSL.name("fiat_currency"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.invoices.ttl_minutes</code>.
     */
    public final TableField<InvoicesRecord, Integer> TTL_MINUTES = createField(DSL.name("ttl_minutes"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.invoices.price_variable</code>.
     */
    public final TableField<InvoicesRecord, String> PRICE_VARIABLE = createField(DSL.name("price_variable"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.invoices.comment</code>.
     */
    public final TableField<InvoicesRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.invoices.pieces_max</code>.
     */
    public final TableField<InvoicesRecord, Integer> PIECES_MAX = createField(DSL.name("pieces_max"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.invoices.pieces_min</code>.
     */
    public final TableField<InvoicesRecord, Integer> PIECES_MIN = createField(DSL.name("pieces_min"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.invoices.price</code>.
     */
    public final TableField<InvoicesRecord, BigDecimal> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false).defaultValue(org.jooq.impl.DSL.field("0.0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.invoices.amount_payed_crypto</code>.
     */
    public final TableField<InvoicesRecord, BigDecimal> AMOUNT_PAYED_CRYPTO = createField(DSL.name("amount_payed_crypto"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false).defaultValue(org.jooq.impl.DSL.field("0.0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.invoices.amount_payed_fiat</code>.
     */
    public final TableField<InvoicesRecord, BigDecimal> AMOUNT_PAYED_FIAT = createField(DSL.name("amount_payed_fiat"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false).defaultValue(org.jooq.impl.DSL.field("0.0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.invoices.created_at</code>.
     */
    public final TableField<InvoicesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("'0001-01-01 00:00:00'::timestamp without time zone", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.invoices.current_crypto_amount</code>.
     */
    public final TableField<InvoicesRecord, BigDecimal> CURRENT_CRYPTO_AMOUNT = createField(DSL.name("current_crypto_amount"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false).defaultValue(org.jooq.impl.DSL.field("0.0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.invoices.deleted_at</code>.
     */
    public final TableField<InvoicesRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.invoices.expire_time</code>.
     */
    public final TableField<InvoicesRecord, LocalDateTime> EXPIRE_TIME = createField(DSL.name("expire_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.invoices.owner_fk</code>.
     */
    public final TableField<InvoicesRecord, Long> OWNER_FK = createField(DSL.name("owner_fk"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.invoices.payments_count</code>.
     */
    public final TableField<InvoicesRecord, Integer> PAYMENTS_COUNT = createField(DSL.name("payments_count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.invoices.status</code>.
     */
    public final TableField<InvoicesRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.invoices.target_user_fk</code>.
     */
    public final TableField<InvoicesRecord, Long> TARGET_USER_FK = createField(DSL.name("target_user_fk"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.invoices.fee</code>.
     */
    public final TableField<InvoicesRecord, BigDecimal> FEE = createField(DSL.name("fee"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false).defaultValue(org.jooq.impl.DSL.field("0.0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.invoices.target_deleted</code>.
     */
    public final TableField<InvoicesRecord, Boolean> TARGET_DELETED = createField(DSL.name("target_deleted"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.invoices.limit_liquidity</code>.
     */
    public final TableField<InvoicesRecord, Boolean> LIMIT_LIQUIDITY = createField(DSL.name("limit_liquidity"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.invoices</code> table reference
     */
    public Invoices() {
        this(DSL.name("invoices"), null);
    }

    /**
     * Create an aliased <code>public.invoices</code> table reference
     */
    public Invoices(String alias) {
        this(DSL.name(alias), INVOICES);
    }

    /**
     * Create an aliased <code>public.invoices</code> table reference
     */
    public Invoices(Name alias) {
        this(alias, INVOICES);
    }

    private Invoices(Name alias, Table<InvoicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invoices(Name alias, Table<InvoicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Invoices(Table<O> child, ForeignKey<O, InvoicesRecord> key) {
        super(child, key, INVOICES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_INVOICES_EXPIRE_TIME, Indexes.IX_INVOICES_IS_PRIVATE, Indexes.IX_INVOICES_OWNER_FK, Indexes.IX_INVOICES_STATUS, Indexes.IX_INVOICES_TARGET_USER_FK, Indexes.IX_INVOICES_TTL_MINUTES, Indexes.IX_INVOICES_USER_NAME);
    }

    @Override
    public Identity<InvoicesRecord, Long> getIdentity() {
        return Keys.IDENTITY_INVOICES;
    }

    @Override
    public UniqueKey<InvoicesRecord> getPrimaryKey() {
        return Keys.PK_INVOICES;
    }

    @Override
    public List<UniqueKey<InvoicesRecord>> getKeys() {
        return Arrays.<UniqueKey<InvoicesRecord>>asList(Keys.PK_INVOICES);
    }

    @Override
    public List<ForeignKey<InvoicesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InvoicesRecord, ?>>asList(Keys.INVOICES__FK_INVOICES_USER_DATAS_OWNER_FK, Keys.INVOICES__FK_INVOICES_USER_DATAS_TARGET_USER_FK);
    }

    public UserDatas fkInvoicesUserDatasOwnerFk() {
        return new UserDatas(this, Keys.INVOICES__FK_INVOICES_USER_DATAS_OWNER_FK);
    }

    public UserDatas fkInvoicesUserDatasTargetUserFk() {
        return new UserDatas(this, Keys.INVOICES__FK_INVOICES_USER_DATAS_TARGET_USER_FK);
    }

    @Override
    public Invoices as(String alias) {
        return new Invoices(DSL.name(alias), this);
    }

    @Override
    public Invoices as(Name alias) {
        return new Invoices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoices rename(String name) {
        return new Invoices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoices rename(Name name) {
        return new Invoices(name, null);
    }
}
