/*
 * This file is generated by jOOQ.
 */
package ru.toxic.db.data.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.db.data.Keys;
import ru.toxic.db.data.Public;
import ru.toxic.db.data.tables.records.UserDataSnapshotRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDataSnapshot extends TableImpl<UserDataSnapshotRecord> {

    private static final long serialVersionUID = -1973373973;

    /**
     * The reference instance of <code>public.user_data_snapshot</code>
     */
    public static final UserDataSnapshot USER_DATA_SNAPSHOT = new UserDataSnapshot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDataSnapshotRecord> getRecordType() {
        return UserDataSnapshotRecord.class;
    }

    /**
     * The column <code>public.user_data_snapshot.key</code>.
     */
    public final TableField<UserDataSnapshotRecord, Long> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_data_snapshot.id</code>.
     */
    public final TableField<UserDataSnapshotRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.user_id</code>.
     */
    public final TableField<UserDataSnapshotRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user_data_snapshot.user_name</code>.
     */
    public final TableField<UserDataSnapshotRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user_data_snapshot.trades_avg_amount</code>.
     */
    public final TableField<UserDataSnapshotRecord, BigDecimal> TRADES_AVG_AMOUNT = createField(DSL.name("trades_avg_amount"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.trades_count</code>.
     */
    public final TableField<UserDataSnapshotRecord, Long> TRADES_COUNT = createField(DSL.name("trades_count"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.counterpartys_count</code>.
     */
    public final TableField<UserDataSnapshotRecord, Long> COUNTERPARTYS_COUNT = createField(DSL.name("counterpartys_count"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.response_rate</code>.
     */
    public final TableField<UserDataSnapshotRecord, BigDecimal> RESPONSE_RATE = createField(DSL.name("response_rate"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.first_trade_date</code>.
     */
    public final TableField<UserDataSnapshotRecord, LocalDateTime> FIRST_TRADE_DATE = createField(DSL.name("first_trade_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.user_data_snapshot.is_identity_verifed</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> IS_IDENTITY_VERIFED = createField(DSL.name("is_identity_verifed"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.trusted_count</code>.
     */
    public final TableField<UserDataSnapshotRecord, Long> TRUSTED_COUNT = createField(DSL.name("trusted_count"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.blocked_count</code>.
     */
    public final TableField<UserDataSnapshotRecord, Long> BLOCKED_COUNT = createField(DSL.name("blocked_count"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.avg_delay_seconds</code>.
     */
    public final TableField<UserDataSnapshotRecord, Long> AVG_DELAY_SECONDS = createField(DSL.name("avg_delay_seconds"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.median_delay_seconds</code>.
     */
    public final TableField<UserDataSnapshotRecord, Long> MEDIAN_DELAY_SECONDS = createField(DSL.name("median_delay_seconds"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.time_zone</code>.
     */
    public final TableField<UserDataSnapshotRecord, String> TIME_ZONE = createField(DSL.name("time_zone"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user_data_snapshot.introduction</code>.
     */
    public final TableField<UserDataSnapshotRecord, String> INTRODUCTION = createField(DSL.name("introduction"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user_data_snapshot.site</code>.
     */
    public final TableField<UserDataSnapshotRecord, String> SITE = createField(DSL.name("site"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user_data_snapshot.sales_disabled</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> SALES_DISABLED = createField(DSL.name("sales_disabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.buys_disabled</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> BUYS_DISABLED = createField(DSL.name("buys_disabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.send_sms_contacts_notification</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> SEND_SMS_CONTACTS_NOTIFICATION = createField(DSL.name("send_sms_contacts_notification"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.send_sms_payments_notifications</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> SEND_SMS_PAYMENTS_NOTIFICATIONS = createField(DSL.name("send_sms_payments_notifications"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.send_crypto_deposit_notifications</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> SEND_CRYPTO_DEPOSIT_NOTIFICATIONS = createField(DSL.name("send_crypto_deposit_notifications"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.show_me_as_having_verified_real_name</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> SHOW_ME_AS_HAVING_VERIFIED_REAL_NAME = createField(DSL.name("show_me_as_having_verified_real_name"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.disable_confidential_information_from_email</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> DISABLE_CONFIDENTIAL_INFORMATION_FROM_EMAIL = createField(DSL.name("disable_confidential_information_from_email"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.enable_web_notifications</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> ENABLE_WEB_NOTIFICATIONS = createField(DSL.name("enable_web_notifications"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.created_at</code>.
     */
    public final TableField<UserDataSnapshotRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.user_data_snapshot.is_anonymous</code>.
     */
    public final TableField<UserDataSnapshotRecord, Boolean> IS_ANONYMOUS = createField(DSL.name("is_anonymous"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.user_data_snapshot</code> table reference
     */
    public UserDataSnapshot() {
        this(DSL.name("user_data_snapshot"), null);
    }

    /**
     * Create an aliased <code>public.user_data_snapshot</code> table reference
     */
    public UserDataSnapshot(String alias) {
        this(DSL.name(alias), USER_DATA_SNAPSHOT);
    }

    /**
     * Create an aliased <code>public.user_data_snapshot</code> table reference
     */
    public UserDataSnapshot(Name alias) {
        this(alias, USER_DATA_SNAPSHOT);
    }

    private UserDataSnapshot(Name alias, Table<UserDataSnapshotRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDataSnapshot(Name alias, Table<UserDataSnapshotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserDataSnapshot(Table<O> child, ForeignKey<O, UserDataSnapshotRecord> key) {
        super(child, key, USER_DATA_SNAPSHOT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UserDataSnapshotRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_DATA_SNAPSHOT;
    }

    @Override
    public UniqueKey<UserDataSnapshotRecord> getPrimaryKey() {
        return Keys.PK_USER_DATA_SNAPSHOT;
    }

    @Override
    public List<UniqueKey<UserDataSnapshotRecord>> getKeys() {
        return Arrays.<UniqueKey<UserDataSnapshotRecord>>asList(Keys.PK_USER_DATA_SNAPSHOT);
    }

    @Override
    public UserDataSnapshot as(String alias) {
        return new UserDataSnapshot(DSL.name(alias), this);
    }

    @Override
    public UserDataSnapshot as(Name alias) {
        return new UserDataSnapshot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDataSnapshot rename(String name) {
        return new UserDataSnapshot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDataSnapshot rename(Name name) {
        return new UserDataSnapshot(name, null);
    }
}
