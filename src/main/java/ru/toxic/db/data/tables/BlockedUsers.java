/*
 * This file is generated by jOOQ.
 */
package ru.toxic.db.data.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.toxic.db.data.Indexes;
import ru.toxic.db.data.Keys;
import ru.toxic.db.data.Public;
import ru.toxic.db.data.tables.records.BlockedUsersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockedUsers extends TableImpl<BlockedUsersRecord> {

    private static final long serialVersionUID = -1482081728;

    /**
     * The reference instance of <code>public.blocked_users</code>
     */
    public static final BlockedUsers BLOCKED_USERS = new BlockedUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockedUsersRecord> getRecordType() {
        return BlockedUsersRecord.class;
    }

    /**
     * The column <code>public.blocked_users.id</code>.
     */
    public final TableField<BlockedUsersRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.blocked_users.owner_id</code>.
     */
    public final TableField<BlockedUsersRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.blocked_users.user_id</code>.
     */
    public final TableField<BlockedUsersRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.blocked_users</code> table reference
     */
    public BlockedUsers() {
        this(DSL.name("blocked_users"), null);
    }

    /**
     * Create an aliased <code>public.blocked_users</code> table reference
     */
    public BlockedUsers(String alias) {
        this(DSL.name(alias), BLOCKED_USERS);
    }

    /**
     * Create an aliased <code>public.blocked_users</code> table reference
     */
    public BlockedUsers(Name alias) {
        this(alias, BLOCKED_USERS);
    }

    private BlockedUsers(Name alias, Table<BlockedUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlockedUsers(Name alias, Table<BlockedUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BlockedUsers(Table<O> child, ForeignKey<O, BlockedUsersRecord> key) {
        super(child, key, BLOCKED_USERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_BLOCKED_USERS_OWNER_ID, Indexes.IX_BLOCKED_USERS_USER_ID);
    }

    @Override
    public Identity<BlockedUsersRecord, Long> getIdentity() {
        return Keys.IDENTITY_BLOCKED_USERS;
    }

    @Override
    public UniqueKey<BlockedUsersRecord> getPrimaryKey() {
        return Keys.PK_BLOCKED_USERS;
    }

    @Override
    public List<UniqueKey<BlockedUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<BlockedUsersRecord>>asList(Keys.PK_BLOCKED_USERS);
    }

    @Override
    public List<ForeignKey<BlockedUsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BlockedUsersRecord, ?>>asList(Keys.BLOCKED_USERS__FK_BLOCKED_USERS_USER_DATAS_OWNER_ID, Keys.BLOCKED_USERS__FK_BLOCKED_USERS_USER_DATAS_USER_ID);
    }

    public UserDatas fkBlockedUsersUserDatasOwnerId() {
        return new UserDatas(this, Keys.BLOCKED_USERS__FK_BLOCKED_USERS_USER_DATAS_OWNER_ID);
    }

    public UserDatas fkBlockedUsersUserDatasUserId() {
        return new UserDatas(this, Keys.BLOCKED_USERS__FK_BLOCKED_USERS_USER_DATAS_USER_ID);
    }

    @Override
    public BlockedUsers as(String alias) {
        return new BlockedUsers(DSL.name(alias), this);
    }

    @Override
    public BlockedUsers as(Name alias) {
        return new BlockedUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockedUsers rename(String name) {
        return new BlockedUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockedUsers rename(Name name) {
        return new BlockedUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
