/*
 * This file is generated by jOOQ.
 */
package is.toxic.db.identity.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import is.toxic.db.identity.Keys;
import is.toxic.db.identity.Public;
import is.toxic.db.identity.tables.records.AspNetUserTokensRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AspNetUserTokens extends TableImpl<AspNetUserTokensRecord> {

    private static final long serialVersionUID = -395639146;

    /**
     * The reference instance of <code>public.asp_net_user_tokens</code>
     */
    public static final AspNetUserTokens ASP_NET_USER_TOKENS = new AspNetUserTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AspNetUserTokensRecord> getRecordType() {
        return AspNetUserTokensRecord.class;
    }

    /**
     * The column <code>public.asp_net_user_tokens.user_id</code>.
     */
    public final TableField<AspNetUserTokensRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_user_tokens.login_provider</code>.
     */
    public final TableField<AspNetUserTokensRecord, String> LOGIN_PROVIDER = createField(DSL.name("login_provider"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_user_tokens.name</code>.
     */
    public final TableField<AspNetUserTokensRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.asp_net_user_tokens.value</code>.
     */
    public final TableField<AspNetUserTokensRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.asp_net_user_tokens</code> table reference
     */
    public AspNetUserTokens() {
        this(DSL.name("asp_net_user_tokens"), null);
    }

    /**
     * Create an aliased <code>public.asp_net_user_tokens</code> table reference
     */
    public AspNetUserTokens(String alias) {
        this(DSL.name(alias), ASP_NET_USER_TOKENS);
    }

    /**
     * Create an aliased <code>public.asp_net_user_tokens</code> table reference
     */
    public AspNetUserTokens(Name alias) {
        this(alias, ASP_NET_USER_TOKENS);
    }

    private AspNetUserTokens(Name alias, Table<AspNetUserTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private AspNetUserTokens(Name alias, Table<AspNetUserTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AspNetUserTokens(Table<O> child, ForeignKey<O, AspNetUserTokensRecord> key) {
        super(child, key, ASP_NET_USER_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AspNetUserTokensRecord> getPrimaryKey() {
        return Keys.PK_ASP_NET_USER_TOKENS;
    }

    @Override
    public List<UniqueKey<AspNetUserTokensRecord>> getKeys() {
        return Arrays.<UniqueKey<AspNetUserTokensRecord>>asList(Keys.PK_ASP_NET_USER_TOKENS);
    }

    @Override
    public List<ForeignKey<AspNetUserTokensRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AspNetUserTokensRecord, ?>>asList(Keys.ASP_NET_USER_TOKENS__FK_ASP_NET_USER_TOKENS_ASP_NET_USERS_USER_ID);
    }

    public AspNetUsers aspNetUsers() {
        return new AspNetUsers(this, Keys.ASP_NET_USER_TOKENS__FK_ASP_NET_USER_TOKENS_ASP_NET_USERS_USER_ID);
    }

    @Override
    public AspNetUserTokens as(String alias) {
        return new AspNetUserTokens(DSL.name(alias), this);
    }

    @Override
    public AspNetUserTokens as(Name alias) {
        return new AspNetUserTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AspNetUserTokens rename(String name) {
        return new AspNetUserTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AspNetUserTokens rename(Name name) {
        return new AspNetUserTokens(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
