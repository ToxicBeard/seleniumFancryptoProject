/*
 * This file is generated by jOOQ.
 */
package is.toxic.db.data.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import is.toxic.db.data.Indexes;
import is.toxic.db.data.Keys;
import is.toxic.db.data.Public;
import is.toxic.db.data.tables.records.InTransactionsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InTransactions extends TableImpl<InTransactionsRecord> {

    private static final long serialVersionUID = 1050156762;

    /**
     * The reference instance of <code>public.in_transactions</code>
     */
    public static final InTransactions IN_TRANSACTIONS = new InTransactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InTransactionsRecord> getRecordType() {
        return InTransactionsRecord.class;
    }

    /**
     * The column <code>public.in_transactions.id</code>.
     */
    public final TableField<InTransactionsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.in_transactions.tx_id</code>.
     */
    public final TableField<InTransactionsRecord, String> TX_ID = createField(DSL.name("tx_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.in_transactions.address_id</code>.
     */
    public final TableField<InTransactionsRecord, Long> ADDRESS_ID = createField(DSL.name("address_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.in_transactions.amount</code>.
     */
    public final TableField<InTransactionsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.in_transactions.confirmations</code>.
     */
    public final TableField<InTransactionsRecord, Integer> CONFIRMATIONS = createField(DSL.name("confirmations"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.in_transactions.time</code>.
     */
    public final TableField<InTransactionsRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.in_transactions</code> table reference
     */
    public InTransactions() {
        this(DSL.name("in_transactions"), null);
    }

    /**
     * Create an aliased <code>public.in_transactions</code> table reference
     */
    public InTransactions(String alias) {
        this(DSL.name(alias), IN_TRANSACTIONS);
    }

    /**
     * Create an aliased <code>public.in_transactions</code> table reference
     */
    public InTransactions(Name alias) {
        this(alias, IN_TRANSACTIONS);
    }

    private InTransactions(Name alias, Table<InTransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private InTransactions(Name alias, Table<InTransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> InTransactions(Table<O> child, ForeignKey<O, InTransactionsRecord> key) {
        super(child, key, IN_TRANSACTIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_IN_TRANSACTIONS_ADDRESS_ID, Indexes.IX_IN_TRANSACTIONS_CONFIRMATIONS, Indexes.IX_IN_TRANSACTIONS_TX_ID);
    }

    @Override
    public Identity<InTransactionsRecord, Long> getIdentity() {
        return Keys.IDENTITY_IN_TRANSACTIONS;
    }

    @Override
    public UniqueKey<InTransactionsRecord> getPrimaryKey() {
        return Keys.PK_IN_TRANSACTIONS;
    }

    @Override
    public List<UniqueKey<InTransactionsRecord>> getKeys() {
        return Arrays.<UniqueKey<InTransactionsRecord>>asList(Keys.PK_IN_TRANSACTIONS);
    }

    @Override
    public List<ForeignKey<InTransactionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InTransactionsRecord, ?>>asList(Keys.IN_TRANSACTIONS__FK_IN_TRANSACTIONS_IN_ADDRESSES_ADDRESS_ID);
    }

    public InAddresses inAddresses() {
        return new InAddresses(this, Keys.IN_TRANSACTIONS__FK_IN_TRANSACTIONS_IN_ADDRESSES_ADDRESS_ID);
    }

    @Override
    public InTransactions as(String alias) {
        return new InTransactions(DSL.name(alias), this);
    }

    @Override
    public InTransactions as(Name alias) {
        return new InTransactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InTransactions rename(String name) {
        return new InTransactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InTransactions rename(Name name) {
        return new InTransactions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Long, BigDecimal, Integer, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
