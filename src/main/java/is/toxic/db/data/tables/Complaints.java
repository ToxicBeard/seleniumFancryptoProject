/*
 * This file is generated by jOOQ.
 */
package is.toxic.db.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import is.toxic.db.data.Keys;
import is.toxic.db.data.Public;
import is.toxic.db.data.tables.records.ComplaintsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Complaints extends TableImpl<ComplaintsRecord> {

    private static final long serialVersionUID = -1748950114;

    /**
     * The reference instance of <code>public.complaints</code>
     */
    public static final Complaints COMPLAINTS = new Complaints();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComplaintsRecord> getRecordType() {
        return ComplaintsRecord.class;
    }

    /**
     * The column <code>public.complaints.id</code>.
     */
    public final TableField<ComplaintsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.complaints.text</code>.
     */
    public final TableField<ComplaintsRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.complaints.from_contact</code>.
     */
    public final TableField<ComplaintsRecord, String> FROM_CONTACT = createField(DSL.name("from_contact"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.complaints.created_at</code>.
     */
    public final TableField<ComplaintsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.complaints.status</code>.
     */
    public final TableField<ComplaintsRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.complaints</code> table reference
     */
    public Complaints() {
        this(DSL.name("complaints"), null);
    }

    /**
     * Create an aliased <code>public.complaints</code> table reference
     */
    public Complaints(String alias) {
        this(DSL.name(alias), COMPLAINTS);
    }

    /**
     * Create an aliased <code>public.complaints</code> table reference
     */
    public Complaints(Name alias) {
        this(alias, COMPLAINTS);
    }

    private Complaints(Name alias, Table<ComplaintsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Complaints(Name alias, Table<ComplaintsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Complaints(Table<O> child, ForeignKey<O, ComplaintsRecord> key) {
        super(child, key, COMPLAINTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ComplaintsRecord, Long> getIdentity() {
        return Keys.IDENTITY_COMPLAINTS;
    }

    @Override
    public UniqueKey<ComplaintsRecord> getPrimaryKey() {
        return Keys.PK_COMPLAINTS;
    }

    @Override
    public List<UniqueKey<ComplaintsRecord>> getKeys() {
        return Arrays.<UniqueKey<ComplaintsRecord>>asList(Keys.PK_COMPLAINTS);
    }

    @Override
    public Complaints as(String alias) {
        return new Complaints(DSL.name(alias), this);
    }

    @Override
    public Complaints as(Name alias) {
        return new Complaints(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Complaints rename(String name) {
        return new Complaints(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Complaints rename(Name name) {
        return new Complaints(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, LocalDateTime, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
