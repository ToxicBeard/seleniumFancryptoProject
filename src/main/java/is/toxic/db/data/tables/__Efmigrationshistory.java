/*
 * This file is generated by jOOQ.
 */
package is.toxic.db.data.tables;


import is.toxic.db.data.Keys;
import is.toxic.db.data.Public;
import is.toxic.db.data.tables.records.__EfmigrationshistoryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class __Efmigrationshistory extends TableImpl<__EfmigrationshistoryRecord> {

    private static final long serialVersionUID = -2122537006;

    /**
     * The reference instance of <code>public.__EFMigrationsHistory</code>
     */
    public static final __Efmigrationshistory __EFMIGRATIONSHISTORY = new __Efmigrationshistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<__EfmigrationshistoryRecord> getRecordType() {
        return __EfmigrationshistoryRecord.class;
    }

    /**
     * The column <code>public.__EFMigrationsHistory.MigrationId</code>.
     */
    public final TableField<__EfmigrationshistoryRecord, String> MIGRATIONID = createField(DSL.name("MigrationId"), org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>public.__EFMigrationsHistory.ProductVersion</code>.
     */
    public final TableField<__EfmigrationshistoryRecord, String> PRODUCTVERSION = createField(DSL.name("ProductVersion"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * Create a <code>public.__EFMigrationsHistory</code> table reference
     */
    public __Efmigrationshistory() {
        this(DSL.name("__EFMigrationsHistory"), null);
    }

    /**
     * Create an aliased <code>public.__EFMigrationsHistory</code> table reference
     */
    public __Efmigrationshistory(String alias) {
        this(DSL.name(alias), __EFMIGRATIONSHISTORY);
    }

    /**
     * Create an aliased <code>public.__EFMigrationsHistory</code> table reference
     */
    public __Efmigrationshistory(Name alias) {
        this(alias, __EFMIGRATIONSHISTORY);
    }

    private __Efmigrationshistory(Name alias, Table<__EfmigrationshistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private __Efmigrationshistory(Name alias, Table<__EfmigrationshistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> __Efmigrationshistory(Table<O> child, ForeignKey<O, __EfmigrationshistoryRecord> key) {
        super(child, key, __EFMIGRATIONSHISTORY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<__EfmigrationshistoryRecord> getPrimaryKey() {
        return Keys.PK___EFMIGRATIONSHISTORY;
    }

    @Override
    public List<UniqueKey<__EfmigrationshistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<__EfmigrationshistoryRecord>>asList(Keys.PK___EFMIGRATIONSHISTORY);
    }

    @Override
    public __Efmigrationshistory as(String alias) {
        return new __Efmigrationshistory(DSL.name(alias), this);
    }

    @Override
    public __Efmigrationshistory as(Name alias) {
        return new __Efmigrationshistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public __Efmigrationshistory rename(String name) {
        return new __Efmigrationshistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public __Efmigrationshistory rename(Name name) {
        return new __Efmigrationshistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
