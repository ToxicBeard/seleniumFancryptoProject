/*
 * This file is generated by jOOQ.
 */
package is.toxic.db.data.tables;


import is.toxic.db.data.Indexes;
import is.toxic.db.data.Keys;
import is.toxic.db.data.Public;
import is.toxic.db.data.tables.records.InvoicePaymentsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvoicePayments extends TableImpl<InvoicePaymentsRecord> {

    private static final long serialVersionUID = 466873799;

    /**
     * The reference instance of <code>public.invoice_payments</code>
     */
    public static final InvoicePayments INVOICE_PAYMENTS = new InvoicePayments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoicePaymentsRecord> getRecordType() {
        return InvoicePaymentsRecord.class;
    }

    /**
     * The column <code>public.invoice_payments.id</code>.
     */
    public final TableField<InvoicePaymentsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.invoice_payments.invoice_fk</code>.
     */
    public final TableField<InvoicePaymentsRecord, Long> INVOICE_FK = createField(DSL.name("invoice_fk"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.invoice_payments.crypto_amount</code>.
     */
    public final TableField<InvoicePaymentsRecord, BigDecimal> CRYPTO_AMOUNT = createField(DSL.name("crypto_amount"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.invoice_payments.fiat_price</code>.
     */
    public final TableField<InvoicePaymentsRecord, BigDecimal> FIAT_PRICE = createField(DSL.name("fiat_price"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.invoice_payments.fiat_amount</code>.
     */
    public final TableField<InvoicePaymentsRecord, BigDecimal> FIAT_AMOUNT = createField(DSL.name("fiat_amount"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.invoice_payments.fee</code>.
     */
    public final TableField<InvoicePaymentsRecord, BigDecimal> FEE = createField(DSL.name("fee"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.invoice_payments.created_at</code>.
     */
    public final TableField<InvoicePaymentsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.invoice_payments.user_data_fk</code>.
     */
    public final TableField<InvoicePaymentsRecord, Long> USER_DATA_FK = createField(DSL.name("user_data_fk"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.invoice_payments.confirmation</code>.
     */
    public final TableField<InvoicePaymentsRecord, String> CONFIRMATION = createField(DSL.name("confirmation"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.invoice_payments.pieces</code>.
     */
    public final TableField<InvoicePaymentsRecord, Integer> PIECES = createField(DSL.name("pieces"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.invoice_payments</code> table reference
     */
    public InvoicePayments() {
        this(DSL.name("invoice_payments"), null);
    }

    /**
     * Create an aliased <code>public.invoice_payments</code> table reference
     */
    public InvoicePayments(String alias) {
        this(DSL.name(alias), INVOICE_PAYMENTS);
    }

    /**
     * Create an aliased <code>public.invoice_payments</code> table reference
     */
    public InvoicePayments(Name alias) {
        this(alias, INVOICE_PAYMENTS);
    }

    private InvoicePayments(Name alias, Table<InvoicePaymentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private InvoicePayments(Name alias, Table<InvoicePaymentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> InvoicePayments(Table<O> child, ForeignKey<O, InvoicePaymentsRecord> key) {
        super(child, key, INVOICE_PAYMENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_INVOICE_PAYMENTS_INVOICE_FK, Indexes.IX_INVOICE_PAYMENTS_USER_DATA_FK);
    }

    @Override
    public Identity<InvoicePaymentsRecord, Long> getIdentity() {
        return Keys.IDENTITY_INVOICE_PAYMENTS;
    }

    @Override
    public UniqueKey<InvoicePaymentsRecord> getPrimaryKey() {
        return Keys.PK_INVOICE_PAYMENTS;
    }

    @Override
    public List<UniqueKey<InvoicePaymentsRecord>> getKeys() {
        return Arrays.<UniqueKey<InvoicePaymentsRecord>>asList(Keys.PK_INVOICE_PAYMENTS);
    }

    @Override
    public List<ForeignKey<InvoicePaymentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InvoicePaymentsRecord, ?>>asList(Keys.INVOICE_PAYMENTS__FK_INVOICE_PAYMENTS_INVOICES_INVOICE_FK, Keys.INVOICE_PAYMENTS__FK_INVOICE_PAYMENTS_USER_DATAS_USER_DATA_FK);
    }

    public Invoices invoices() {
        return new Invoices(this, Keys.INVOICE_PAYMENTS__FK_INVOICE_PAYMENTS_INVOICES_INVOICE_FK);
    }

    public UserDatas userDatas() {
        return new UserDatas(this, Keys.INVOICE_PAYMENTS__FK_INVOICE_PAYMENTS_USER_DATAS_USER_DATA_FK);
    }

    @Override
    public InvoicePayments as(String alias) {
        return new InvoicePayments(DSL.name(alias), this);
    }

    @Override
    public InvoicePayments as(Name alias) {
        return new InvoicePayments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoicePayments rename(String name) {
        return new InvoicePayments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoicePayments rename(Name name) {
        return new InvoicePayments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, BigDecimal, BigDecimal, BigDecimal, BigDecimal, LocalDateTime, Long, String, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
