/*
 * This file is generated by jOOQ.
 */
package is.toxic.db.data.tables;


import is.toxic.db.data.Indexes;
import is.toxic.db.data.Keys;
import is.toxic.db.data.Public;
import is.toxic.db.data.tables.records.InAddressesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InAddresses extends TableImpl<InAddressesRecord> {

    private static final long serialVersionUID = 793345113;

    /**
     * The reference instance of <code>public.in_addresses</code>
     */
    public static final InAddresses IN_ADDRESSES = new InAddresses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InAddressesRecord> getRecordType() {
        return InAddressesRecord.class;
    }

    /**
     * The column <code>public.in_addresses.id</code>.
     */
    public final TableField<InAddressesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.in_addresses.address</code>.
     */
    public final TableField<InAddressesRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.in_addresses.btc_core_wallet_private_key</code>.
     */
    public final TableField<InAddressesRecord, String> BTC_CORE_WALLET_PRIVATE_KEY = createField(DSL.name("btc_core_wallet_private_key"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.in_addresses.owner_id</code>.
     */
    public final TableField<InAddressesRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.in_addresses.is_bech32</code>.
     */
    public final TableField<InAddressesRecord, Boolean> IS_BECH32 = createField(DSL.name("is_bech32"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.in_addresses</code> table reference
     */
    public InAddresses() {
        this(DSL.name("in_addresses"), null);
    }

    /**
     * Create an aliased <code>public.in_addresses</code> table reference
     */
    public InAddresses(String alias) {
        this(DSL.name(alias), IN_ADDRESSES);
    }

    /**
     * Create an aliased <code>public.in_addresses</code> table reference
     */
    public InAddresses(Name alias) {
        this(alias, IN_ADDRESSES);
    }

    private InAddresses(Name alias, Table<InAddressesRecord> aliased) {
        this(alias, aliased, null);
    }

    private InAddresses(Name alias, Table<InAddressesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> InAddresses(Table<O> child, ForeignKey<O, InAddressesRecord> key) {
        super(child, key, IN_ADDRESSES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_IN_ADDRESSES_BTC_CORE_WALLET_PRIVATE_KEY, Indexes.IX_IN_ADDRESSES_OWNER_ID);
    }

    @Override
    public Identity<InAddressesRecord, Long> getIdentity() {
        return Keys.IDENTITY_IN_ADDRESSES;
    }

    @Override
    public UniqueKey<InAddressesRecord> getPrimaryKey() {
        return Keys.PK_IN_ADDRESSES;
    }

    @Override
    public List<UniqueKey<InAddressesRecord>> getKeys() {
        return Arrays.<UniqueKey<InAddressesRecord>>asList(Keys.PK_IN_ADDRESSES);
    }

    @Override
    public List<ForeignKey<InAddressesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InAddressesRecord, ?>>asList(Keys.IN_ADDRESSES__FK_IN_ADDRESSES_BTC_CORE_WALLETS_BTC_CORE_WALLET_PRIVATE_KEY, Keys.IN_ADDRESSES__FK_IN_ADDRESSES_USER_DATAS_OWNER_ID);
    }

    public BtcCoreWallets btcCoreWallets() {
        return new BtcCoreWallets(this, Keys.IN_ADDRESSES__FK_IN_ADDRESSES_BTC_CORE_WALLETS_BTC_CORE_WALLET_PRIVATE_KEY);
    }

    public UserDatas userDatas() {
        return new UserDatas(this, Keys.IN_ADDRESSES__FK_IN_ADDRESSES_USER_DATAS_OWNER_ID);
    }

    @Override
    public InAddresses as(String alias) {
        return new InAddresses(DSL.name(alias), this);
    }

    @Override
    public InAddresses as(Name alias) {
        return new InAddresses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InAddresses rename(String name) {
        return new InAddresses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InAddresses rename(Name name) {
        return new InAddresses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, Long, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
