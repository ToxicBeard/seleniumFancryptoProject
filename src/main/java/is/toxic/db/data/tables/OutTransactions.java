/*
 * This file is generated by jOOQ.
 */
package is.toxic.db.data.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import is.toxic.db.data.Indexes;
import is.toxic.db.data.Keys;
import is.toxic.db.data.Public;
import is.toxic.db.data.tables.records.OutTransactionsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OutTransactions extends TableImpl<OutTransactionsRecord> {

    private static final long serialVersionUID = -703798797;

    /**
     * The reference instance of <code>public.out_transactions</code>
     */
    public static final OutTransactions OUT_TRANSACTIONS = new OutTransactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OutTransactionsRecord> getRecordType() {
        return OutTransactionsRecord.class;
    }

    /**
     * The column <code>public.out_transactions.id</code>.
     */
    public final TableField<OutTransactionsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.out_transactions.tx_id</code>.
     */
    public final TableField<OutTransactionsRecord, String> TX_ID = createField(DSL.name("tx_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.out_transactions.address</code>.
     */
    public final TableField<OutTransactionsRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.out_transactions.amount</code>.
     */
    public final TableField<OutTransactionsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.out_transactions.confirmations</code>.
     */
    public final TableField<OutTransactionsRecord, Integer> CONFIRMATIONS = createField(DSL.name("confirmations"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.out_transactions.time</code>.
     */
    public final TableField<OutTransactionsRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.out_transactions.fee</code>.
     */
    public final TableField<OutTransactionsRecord, BigDecimal> FEE = createField(DSL.name("fee"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.out_transactions.wallet_private_key</code>.
     */
    public final TableField<OutTransactionsRecord, String> WALLET_PRIVATE_KEY = createField(DSL.name("wallet_private_key"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.out_transactions.request_id</code>.
     */
    public final TableField<OutTransactionsRecord, Long> REQUEST_ID = createField(DSL.name("request_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.out_transactions</code> table reference
     */
    public OutTransactions() {
        this(DSL.name("out_transactions"), null);
    }

    /**
     * Create an aliased <code>public.out_transactions</code> table reference
     */
    public OutTransactions(String alias) {
        this(DSL.name(alias), OUT_TRANSACTIONS);
    }

    /**
     * Create an aliased <code>public.out_transactions</code> table reference
     */
    public OutTransactions(Name alias) {
        this(alias, OUT_TRANSACTIONS);
    }

    private OutTransactions(Name alias, Table<OutTransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OutTransactions(Name alias, Table<OutTransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OutTransactions(Table<O> child, ForeignKey<O, OutTransactionsRecord> key) {
        super(child, key, OUT_TRANSACTIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_OUT_TRANSACTIONS_CONFIRMATIONS, Indexes.IX_OUT_TRANSACTIONS_REQUEST_ID, Indexes.IX_OUT_TRANSACTIONS_TX_ID, Indexes.IX_OUT_TRANSACTIONS_WALLET_PRIVATE_KEY);
    }

    @Override
    public Identity<OutTransactionsRecord, Long> getIdentity() {
        return Keys.IDENTITY_OUT_TRANSACTIONS;
    }

    @Override
    public UniqueKey<OutTransactionsRecord> getPrimaryKey() {
        return Keys.PK_OUT_TRANSACTIONS;
    }

    @Override
    public List<UniqueKey<OutTransactionsRecord>> getKeys() {
        return Arrays.<UniqueKey<OutTransactionsRecord>>asList(Keys.PK_OUT_TRANSACTIONS);
    }

    @Override
    public List<ForeignKey<OutTransactionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OutTransactionsRecord, ?>>asList(Keys.OUT_TRANSACTIONS__FK_OUT_TRANSACTIONS_BTC_CORE_WALLETS_WALLET_PRIVATE_KEY, Keys.OUT_TRANSACTIONS__FK_OUT_TRANSACTIONS_OUT_TRANSACTION_REQUESTS_REQUEST_ID);
    }

    public BtcCoreWallets btcCoreWallets() {
        return new BtcCoreWallets(this, Keys.OUT_TRANSACTIONS__FK_OUT_TRANSACTIONS_BTC_CORE_WALLETS_WALLET_PRIVATE_KEY);
    }

    public OutTransactionRequests outTransactionRequests() {
        return new OutTransactionRequests(this, Keys.OUT_TRANSACTIONS__FK_OUT_TRANSACTIONS_OUT_TRANSACTION_REQUESTS_REQUEST_ID);
    }

    @Override
    public OutTransactions as(String alias) {
        return new OutTransactions(DSL.name(alias), this);
    }

    @Override
    public OutTransactions as(Name alias) {
        return new OutTransactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OutTransactions rename(String name) {
        return new OutTransactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OutTransactions rename(Name name) {
        return new OutTransactions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, BigDecimal, Integer, LocalDateTime, BigDecimal, String, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
