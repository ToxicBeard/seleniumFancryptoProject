/*
 * This file is generated by jOOQ.
 */
package is.toxic.db.data.tables;


import is.toxic.db.data.Keys;
import is.toxic.db.data.Public;
import is.toxic.db.data.tables.records.DisputesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Disputes extends TableImpl<DisputesRecord> {

    private static final long serialVersionUID = 114091243;

    /**
     * The reference instance of <code>public.disputes</code>
     */
    public static final Disputes DISPUTES = new Disputes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DisputesRecord> getRecordType() {
        return DisputesRecord.class;
    }

    /**
     * The column <code>public.disputes.id</code>.
     */
    public final TableField<DisputesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.disputes.created_at</code>.
     */
    public final TableField<DisputesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.disputes.jira_request_key</code>.
     */
    public final TableField<DisputesRecord, String> JIRA_REQUEST_KEY = createField(DSL.name("jira_request_key"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.disputes</code> table reference
     */
    public Disputes() {
        this(DSL.name("disputes"), null);
    }

    /**
     * Create an aliased <code>public.disputes</code> table reference
     */
    public Disputes(String alias) {
        this(DSL.name(alias), DISPUTES);
    }

    /**
     * Create an aliased <code>public.disputes</code> table reference
     */
    public Disputes(Name alias) {
        this(alias, DISPUTES);
    }

    private Disputes(Name alias, Table<DisputesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Disputes(Name alias, Table<DisputesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Disputes(Table<O> child, ForeignKey<O, DisputesRecord> key) {
        super(child, key, DISPUTES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<DisputesRecord, Long> getIdentity() {
        return Keys.IDENTITY_DISPUTES;
    }

    @Override
    public UniqueKey<DisputesRecord> getPrimaryKey() {
        return Keys.PK_DISPUTES;
    }

    @Override
    public List<UniqueKey<DisputesRecord>> getKeys() {
        return Arrays.<UniqueKey<DisputesRecord>>asList(Keys.PK_DISPUTES);
    }

    @Override
    public Disputes as(String alias) {
        return new Disputes(DSL.name(alias), this);
    }

    @Override
    public Disputes as(Name alias) {
        return new Disputes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Disputes rename(String name) {
        return new Disputes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Disputes rename(Name name) {
        return new Disputes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, LocalDateTime, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
