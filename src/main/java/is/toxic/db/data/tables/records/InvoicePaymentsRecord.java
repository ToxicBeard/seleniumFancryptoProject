/*
 * This file is generated by jOOQ.
 */
package is.toxic.db.data.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;

import is.toxic.db.data.tables.InvoicePayments;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvoicePaymentsRecord extends UpdatableRecordImpl<InvoicePaymentsRecord> implements Record10<Long, Long, BigDecimal, BigDecimal, BigDecimal, BigDecimal, LocalDateTime, Long, String, Integer> {

    private static final long serialVersionUID = 620745184;

    /**
     * Setter for <code>public.invoice_payments.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.invoice_payments.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.invoice_payments.invoice_fk</code>.
     */
    public void setInvoiceFk(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.invoice_payments.invoice_fk</code>.
     */
    public Long getInvoiceFk() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.invoice_payments.crypto_amount</code>.
     */
    public void setCryptoAmount(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.invoice_payments.crypto_amount</code>.
     */
    public BigDecimal getCryptoAmount() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>public.invoice_payments.fiat_price</code>.
     */
    public void setFiatPrice(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.invoice_payments.fiat_price</code>.
     */
    public BigDecimal getFiatPrice() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>public.invoice_payments.fiat_amount</code>.
     */
    public void setFiatAmount(BigDecimal value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.invoice_payments.fiat_amount</code>.
     */
    public BigDecimal getFiatAmount() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.invoice_payments.fee</code>.
     */
    public void setFee(BigDecimal value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.invoice_payments.fee</code>.
     */
    public BigDecimal getFee() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>public.invoice_payments.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.invoice_payments.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.invoice_payments.user_data_fk</code>.
     */
    public void setUserDataFk(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.invoice_payments.user_data_fk</code>.
     */
    public Long getUserDataFk() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>public.invoice_payments.confirmation</code>.
     */
    public void setConfirmation(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.invoice_payments.confirmation</code>.
     */
    public String getConfirmation() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.invoice_payments.pieces</code>.
     */
    public void setPieces(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.invoice_payments.pieces</code>.
     */
    public Integer getPieces() {
        return (Integer) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, BigDecimal, BigDecimal, BigDecimal, BigDecimal, LocalDateTime, Long, String, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, Long, BigDecimal, BigDecimal, BigDecimal, BigDecimal, LocalDateTime, Long, String, Integer> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return InvoicePayments.INVOICE_PAYMENTS.ID;
    }

    @Override
    public Field<Long> field2() {
        return InvoicePayments.INVOICE_PAYMENTS.INVOICE_FK;
    }

    @Override
    public Field<BigDecimal> field3() {
        return InvoicePayments.INVOICE_PAYMENTS.CRYPTO_AMOUNT;
    }

    @Override
    public Field<BigDecimal> field4() {
        return InvoicePayments.INVOICE_PAYMENTS.FIAT_PRICE;
    }

    @Override
    public Field<BigDecimal> field5() {
        return InvoicePayments.INVOICE_PAYMENTS.FIAT_AMOUNT;
    }

    @Override
    public Field<BigDecimal> field6() {
        return InvoicePayments.INVOICE_PAYMENTS.FEE;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return InvoicePayments.INVOICE_PAYMENTS.CREATED_AT;
    }

    @Override
    public Field<Long> field8() {
        return InvoicePayments.INVOICE_PAYMENTS.USER_DATA_FK;
    }

    @Override
    public Field<String> field9() {
        return InvoicePayments.INVOICE_PAYMENTS.CONFIRMATION;
    }

    @Override
    public Field<Integer> field10() {
        return InvoicePayments.INVOICE_PAYMENTS.PIECES;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getInvoiceFk();
    }

    @Override
    public BigDecimal component3() {
        return getCryptoAmount();
    }

    @Override
    public BigDecimal component4() {
        return getFiatPrice();
    }

    @Override
    public BigDecimal component5() {
        return getFiatAmount();
    }

    @Override
    public BigDecimal component6() {
        return getFee();
    }

    @Override
    public LocalDateTime component7() {
        return getCreatedAt();
    }

    @Override
    public Long component8() {
        return getUserDataFk();
    }

    @Override
    public String component9() {
        return getConfirmation();
    }

    @Override
    public Integer component10() {
        return getPieces();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getInvoiceFk();
    }

    @Override
    public BigDecimal value3() {
        return getCryptoAmount();
    }

    @Override
    public BigDecimal value4() {
        return getFiatPrice();
    }

    @Override
    public BigDecimal value5() {
        return getFiatAmount();
    }

    @Override
    public BigDecimal value6() {
        return getFee();
    }

    @Override
    public LocalDateTime value7() {
        return getCreatedAt();
    }

    @Override
    public Long value8() {
        return getUserDataFk();
    }

    @Override
    public String value9() {
        return getConfirmation();
    }

    @Override
    public Integer value10() {
        return getPieces();
    }

    @Override
    public InvoicePaymentsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord value2(Long value) {
        setInvoiceFk(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord value3(BigDecimal value) {
        setCryptoAmount(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord value4(BigDecimal value) {
        setFiatPrice(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord value5(BigDecimal value) {
        setFiatAmount(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord value6(BigDecimal value) {
        setFee(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord value7(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord value8(Long value) {
        setUserDataFk(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord value9(String value) {
        setConfirmation(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord value10(Integer value) {
        setPieces(value);
        return this;
    }

    @Override
    public InvoicePaymentsRecord values(Long value1, Long value2, BigDecimal value3, BigDecimal value4, BigDecimal value5, BigDecimal value6, LocalDateTime value7, Long value8, String value9, Integer value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InvoicePaymentsRecord
     */
    public InvoicePaymentsRecord() {
        super(InvoicePayments.INVOICE_PAYMENTS);
    }

    /**
     * Create a detached, initialised InvoicePaymentsRecord
     */
    public InvoicePaymentsRecord(Long id, Long invoiceFk, BigDecimal cryptoAmount, BigDecimal fiatPrice, BigDecimal fiatAmount, BigDecimal fee, LocalDateTime createdAt, Long userDataFk, String confirmation, Integer pieces) {
        super(InvoicePayments.INVOICE_PAYMENTS);

        set(0, id);
        set(1, invoiceFk);
        set(2, cryptoAmount);
        set(3, fiatPrice);
        set(4, fiatAmount);
        set(5, fee);
        set(6, createdAt);
        set(7, userDataFk);
        set(8, confirmation);
        set(9, pieces);
    }
}
